library("RGtk2", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
library("RGtk2", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
set.seed(3343)
pValues = rep(NA,100)
for(i in 1:100){
z = rnorm(20)
x = rnorm(20)
y = rnorm(20,mean=0.5*x)
pValues[i] = summary(lm(y ~ x))$coef[2,4]
}
trueStatus <- rep(c("zero","not zero"),each=500)
table(pValues < 0.1, trueStatus)
trueStatus <- rep(c("zero","not zero"),each=50)
table(pValues < 0.1, trueStatus)
table(p.adjust(pValues,method="bonferroni") < 0.1,trueStatus)
table(p.adjust(pValues,method="BH") < 0.1,trueStatus)
sum(p.adjust(pValues,method="bonferroni") < 0.05)
sum(p.adjust(pValues,method="bonferroni") < 0.1)
sum(p.adjust(pValues,method="BH") < 0.1)
5/25
5/55
d <- c(60, 69, 74, 76 ,84, 89)
summary(d)
p <- c(-3, -8, -2, -10, -5, -8, -4, -10, 8, -7)
var(p)
t <- c(0, -7, -1, 0, -10, -6, -5, -2, -3)
IQR(t)
d <- c(0, 3, 6, 4, 3, -1, 4, 6, 7, -5)
sd(d)
?binom()
??binom()
?rnorm()
x ->rbinom(20,0.4)
x = rbinom(20,0.4)
x = rbinom(1,20,0.4)
x = rbinom(1000,20,0.4)
x = rbinom(20,2000000,0.4)
sd(x)
x = rbinom(20,2,0.4)
sd(x)
fix(x)
x = rbinom(20,20,0.4)
fix(x)
sd(x)
x = rbinom(200,20,0.4)
fix(x)
sd(x)
x = rbinom(1,20,0.4)
sd(x)
sd(x)
sd(x)
x = rbinom(1,20,0.4)
sd(x)
x = rbinom(20,20,0.4)
sd(x)
sd(x)
sd(x)
sd(x)
x = rbinom(20,20,0.4)
sd(x)
x = rbinom(20,1,0.4)
sd(x)
fix(x)
x = rbinom(20,1,0.4)
sd(x)
sd(x)
sd(x)
sd(x)
sd(x)
x = rbinom(20,1,0.4)
sd(x)
x = rbinom(20,1,0.4)
sd(x)
x = rbinom(20,1,0.4)
sd(x)
m1 = 73.1
v1= 38.7
n1 = 30
v1= 38.7 : n1 = 30
v1= 38.7 ; n1 = 30
m1 = 73.1 ; v1= 38.7 ; n1 = 30
m1 = 73.2 ; v1= 38.7 ; n1 = 30
m2 = 76 ; v2 = 23.2 ; n2 = 50
sqrt(4)
m1 - m2
s^2 = 5
s2 = 5
s2 = ((n1 - 1)*v1^2 + (n2-1)*v2^2)/((n1-1)+(n2-1))
m1 = 73.1 ; v1= 181.5 ; n1 = 281
m2 = 76 ; v2 = 231.5 ; n2 = 119
s2 = ((n1 - 1)*v1^2 + (n2-1)*v2^2)/((n1-1)+(n2-1))
s2 = (((n1 - 1)*(v1^2)) + ((n2-1)*(v2^2)))/((n1-1)+(n2-1))
s2 = (((n1 - 1)*(v1^2)) + ((n2-1)*(v2^2))) ;/ ((n1-1)+(n2-1))
s2 = (((n1 - 1)*(v1^2)) + ((n2-1)*(v2^2))) / ((n1-1)+(n2-1))
s2 = (((n1 - 1)*(v1)) + ((n2-1)*(v2))) / ((n1-1)+(n2-1))
4.2 / sqrt( (s2/n1) +(s2/n2))
4.2 / sqrt((s2/n1) +(s2/n2))
m1 = 73.1 ; v1= 38.7 ; n1 = 30
## Mean 2, variance 2, sample size 2
m2 = 76 ; v2 = 23.2 ; n2 = 50
# Pool the variance assuming theta1^2 = theta2^2
s2 = (((n1 - 1)*(v1)) + ((n2-1)*(v2))) / ((n1-1)+(n2-1))
(m1 - m2)  / sqrt((s2/n1) +(s2/n2))
p1 = 0.55 ; n1 = 100
p2 = 0.42 ; n2 = 200
(p1 - p2) / sqrt(((p1*(1-p1))/n1) + ((p2*(1-p2))/n2))
1.96 + sqrt(((p1*(1-p1))/n1) + ((p2*(1-p2))/n2))
(p1 - p2) + 1.96*sqrt(((p1*(1-p1))/n1) + ((p2*(1-p2))/n2))
(p1 - p2) - 1.96*sqrt(((p1*(1-p1))/n1) + ((p2*(1-p2))/n2))
p1 = 0.50 ; n1 = 100
p2 = 0.52 ; n2 = 200
(p1 - p2) / sqrt(((p1*(1-p1))/n1) + ((p2*(1-p2))/n2))
help prop.test
help prop
p1 = 0.50 ; n1 = 100
p2 = 0.52 ; n2 = 200
# Number of successes
x1 = round(n1*p1, 0)
x1
x2 = round(n1*p2, 0)
x2
x2 = round(n2*p2, 0)
x2
## Hypothesis test and confidence interval
prop.test(c(x1,x2), c(n1,n2), alternative='two.sided', correct=y)
prop.test(c(x1,x2), c(n1,n2), alternative='two.sided', correct=Y)
prop.test(c(x1,x2), c(n1,n2), alternative='two.sided', correct=F)
m1 = 10 ; v1= 100 ; n1 = 250
## Mean 2, variance 2, sample size 2
m2 = 20 ; v2 = 150 ; n2 = 400
(m1 - m2)  / sqrt((v1/n1) +(v2/n2))
(m1-m2) + 1.96 * sqrt((v1/n1) +(v2/n2))
(m1-m2) - 1.96 * sqrt((v1/n1) +(v2/n2))
m1 = 10 ; v1= 10 ; n1 = 25
## Mean 2, variance 2, sample size 2
m2 = 20 ; v2 = 15 ; n2 = 80
s2 = (((n1 - 1)*(v1)) + ((n2-1)*(v2))) / ((n1-1)+(n2-1))
(m1 - m2)  / sqrt((s2/n1) +(s2/n2))
sqrt((s2/n1) +(s2/n2))
p1 = 0.55 ; n1 = 5
p2 = 0.42 ; n2 = 8
x1 = round(n1*p1, 0)
x1
x2 = round(n2*p2, 0)
x2
prop.test(c(x1,x2), c(n1,n2), alternative='two.sided', correct=F)
(p1 - p2) - 1.96*sqrt(((p1*(1-p1))/n1) + ((p2*(1-p2))/n2))
(p1 - p2) + 1.96*sqrt(((p1*(1-p1))/n1) + ((p2*(1-p2))/n2))
p1 = 0.68 ; n1 = 1000
p2 = 0.52 ; n2 = 2000
x1 = round(n1*p1, 0)
x1
x2 = round(n2*p2, 0)
x2
## Hypothesis test and confidence interval
prop.test(c(x1,x2), c(n1,n2), alternative='two.sided', correct=F)
(p1 - p2) / sqrt(((p1*(1-p1))/n1) + ((p2*(1-p2))/n2))
sqrt(((p1*(1-p1))/n1) + ((p2*(1-p2))/n2))
(p1 - p2)
(p1 - p2) / sqrt(((p1*(1-p1))/n1) + ((p2*(1-p2))/n2))
phat = ((n1*p1) + (n2*p2)) / (n1+n2)
(p1 - p2) / sqrt(phat*(1-phat)*((1/n1)+(1/n2)))
m1 = 10 ; v1= 10 ; n1 = 25
## Mean 2, variance 2, sample size 2
m2 = 20 ; v2 = 15 ; n2 = 80
# Pool the variance assuming theta1^2 = theta2^2
s2 = (((n1 - 1)*(v1)) + ((n2-1)*(v2))) / ((n1-1)+(n2-1))
(m1 - m2)  /sqrt((s2/n1) +(s2/n2))
(m2 - m1)  /sqrt((s2/n1) +(s2/n2))
(m1-m2) + 2.68 * sqrt((v1/n1) +(v2/n2))
(m1-m2) - 2.68 * sqrt((v1/n1) +(v2/n2))
m1 = 10 ; v1= 100 ; n1 = 250
## Mean 2, variance 2, sample size 2
m2 = 20 ; v2 = 150 ; n2 = 400
# Pool the variance assuming theta1^2 = theta2^2
s2 = (((n1 - 1)*(v1)) + ((n2-1)*(v2))) / ((n1-1)+(n2-1))
(m2 - m1)  /sqrt((s2/n1) +(s2/n2))
(m1 - m2)  / sqrt((v1/n1) +(v2/n2))
x = [1:3]
x = c(1:3)
y = c(13,11,9)
plot(x,y)
0.3 - 0.5 / sqrt(0.25/110)
sqrt(0.25/110)
-0/2 / 0.04767313
-0.2 / 0.04767313
(0.3 - 0.5) / sqrt(0.25/110)
1.96 * sqrt(0.25/52)
0.288 - 0.14
0.288 + 0.14
1.96 * sqrt(0.25/58)
.310 - 0.129
.310 + 0.129
males = 1.087
females = 1.263
numerator = males - females
sqrt((0.2411^2/52)+(0.2494^2/58)
sqrt((0.2411^2/52)+(0.2494^2/58))
sqrt((0.2411^2/52)+(0.2494^2/58))
denominator=sqrt((0.2411^2/52)+(0.2494^2/58))
numerator/denominator
(1.01^3) - (.99^3)
((1.01^3) - (.99^3))
((1.01^3) - (.99^3))/0.02
((2*(1.01^3)+2) - (2*(.99^3)+2)/0.02
((2*(1.01^3)+2) - (2*(.99^3)+2))/0.02
0
((2*(1.01^3)+2) - (2*(.99^3)+2))/0.02
?? save csv
?csv
getwd()
setwd("/Users/mathiasknippenberg/Documents/Kaggle/Amazon Employee Access/")
data = read.csv("train AND validation.csv")
sample = sample(0:1, 32769, replace = TRUE, prob = c(0.3, 0.7))
data$TRAIN = sample
train = data[data$TRAIN == 1,]
validation = data[data$TRAIN ==0,]
train = train[,1:10]
validation = validation[,1:10]
write.table(train, file = "train.csv", sep = ",", row.names = F)
write.table(validation, file = "validation.csv", sep = ",", row.names = F)
